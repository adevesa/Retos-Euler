##Highly divisible triangular number
##Problem 12 
##The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
##
##1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
##
##Let us list the factors of the first seven triangle numbers:
##
## 1: 1
## 3: 1,3
## 6: 1,2,3,6
##10: 1,2,5,10
##15: 1,3,5,15
##21: 1,3,7,21
##28: 1,2,4,7,14,28
##We can see that 28 is the first triangle number to have over five divisors.
##
##What is the value of the first triangle number to have over five hundred divisors?

from math import sqrt
import math

from time import time

def divisorGenerator(n):
    large_divisors = []
    for i in range(1, int(math.sqrt(n) + 1)):
        if n % i == 0:
            yield i
            if i*i != n:
                large_divisors.append(n / i)
    for divisor in reversed(large_divisors):
        yield divisor

   

print(list(divisorGenerator(100)))

def triangle_number(n):
    ultimo = n
    primero = 1

    mitad = n/2

    return int(mitad * (primero + ultimo))

def divisores_de(n):
    divisores = []
    for i in range(1,int(sqrt(n))+1):
        if n % i == 0:
            divisores.append(i)
            if i*i != n:
                divisores.append(n/i)        
    return divisores



def problema():

    n = 1
    while True:
        if(len((divisores_de(triangle_number(n)))) >= 500): return triangle_number(n)
        n = n +1

def problema2():

    n = 1
    while True:
        if(len(list(divisorGenerator((triangle_number(n))))) >= 500): return triangle_number(n)
        n = n +1
        
inicio = time()
print(problema2())
print(time()-inicio)
inicio = time()
print(problema())
print(time()-inicio)
    
        
